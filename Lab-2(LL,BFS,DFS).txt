1. 

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:


        if not head or not head.next or k == 0:
            return head  
        c = head    
        length = 1
        while c.next is not None:
            c = c.next
            length += 1   

  
        k = k % length
        if k == 0:
            return head  

    
        def rotate(head):
            if not head or not head.next:
                return head
            
            first = head
            middle = head
            temp = head

            while temp.next is not None:
                temp = temp.next
            
            last = temp  
            last.next = first  

            
            for _ in range(length - 2):
                middle = middle.next

            middle.next = None 

            return last  
        
        new_head = head         
        for _ in range(k):
            new_head = rotate(new_head)

        return new_head    


2. 

from collections import deque
from typing import List

class Solution:
    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:
        queue = deque()
        visited = [[0]*len(isWater[0]) for _ in range(len(isWater))]
        ans = [[0]*len(isWater[0]) for _ in range(len(isWater))]

        def up(i, j):
            if i > 0:
                return i - 1, j
            return None

        def down(i, j):
            if i < len(isWater) - 1:
                return i + 1, j
            return None

        def right(i, j):
            if j < len(isWater[0]) - 1:
                return i, j + 1
            return None

        def left(i, j):
            if j > 0:
                return i, j - 1
            return None

        for i in range(len(isWater)):
            for j in range(len(isWater[0])):
                if isWater[i][j] == 1:
                    queue.append((i, j, 0))
                    visited[i][j] = 1

        while queue:
            i, j, dist = queue.popleft()
            ans[i][j] = dist

            for direction in [up(i, j), down(i, j), right(i, j), left(i, j)]:
                if direction:
                    ni, nj = direction
                    if not visited[ni][nj]:
                        visited[ni][nj] = 1
                        queue.append((ni, nj, dist + 1))

        return ans


3. 

from typing import List

class Solution:
    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        n = len(graph)
        safe = {}
        
        def dfs(i):
            if i in safe:
                return safe[i]
            safe[i] = False
            for nei in graph[i]:
                if not dfs(nei):
                    return False
            safe[i] = True
            return True
        
        res = []
        for i in range(n):
            if dfs(i):
                res.append(i)
        
        return res
4.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head  

        odd = head
        even = head.next
        even_start = even

        while even and even.next:
            odd.next = odd.next.next
            odd = odd.next

            even.next = even.next.next
            even = even.next

    
        odd.next = even_start

        return head

5.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        def length():
            count = 0
            temp = head
            while temp != None:
                count += 1
                temp = temp.next
            return count
        
        l = length() 
        
        temp = head

        if head == None or head.next == None:
            return head
        
       
        if l == 2:
            second = temp.next
            temp.next = second.next  
            second.next = temp
            return second  

        
       
        while temp and temp.next:
            temp.val, temp.next.val = temp.next.val, temp.val  
            temp = temp.next.next  
        
        return head
